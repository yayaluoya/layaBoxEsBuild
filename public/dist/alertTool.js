(()=>{function n(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,o=new Array(e);t<e;t++)o[t]=n[t];return o}window.addEventListener("load",(function(){var e,t,o,i,s=function(){var n=document.createElement("div");n.innerHTML='\n        <div class="confirmEx">\n            <div class="bg"></div>\n            <div class="content">\n                <div class="mes">Ê∂àÊÅØ</div>\n                <div class="but">\n                    <button class="yes">Á°ÆËÆ§‚úîÔ∏è</button>\n                    <button class="no">ÂèñÊ∂à‚ùå</button>\n                </div>\n            </div>\n        </div>\n    ',n=document.body.appendChild(n.firstElementChild);var e,t=document.getElementsByClassName("confirmEx")[0],o=t.getElementsByClassName("bg")[0],i=t.getElementsByClassName("content")[0],s=t.getElementsByClassName("mes")[0],a=t.getElementsByClassName("yes")[0],d=t.getElementsByClassName("no")[0],r=!1;window.addEventListener("resize",(function(n){i.style.transform="scale(".concat(window.innerWidth/500,")")})),i.style.transform="scale(".concat(window.innerWidth/500,")"),window.addEventListener("keydown",(function(n){r&&"Enter"==n.key&&(e&&e(!0),c()),r&&"Escape"==n.key&&(e&&e(!1),c())}));var c=function(){r=!1,t.classList.remove("show")};return o.onclick=function(){e&&e(!1),c()},i.onclick=function(n){e&&e(!0),c(),n.stopPropagation()},a.onclick=function(n){e&&e(!0),c(),n.stopPropagation()},d.onclick=function(n){e&&e(!1),c(),n.stopPropagation()},function(n,o){r=!0,t.classList.add("show"),e=o,s.innerHTML=n}}();o=0,i=!1,esbuildTool.webSocketT.instance.addEventListener("message",(function(e){var t,a,d=JSON.parse(e.data),r=d.mes;d.type==esbuildTool.webSocketT.mesType.contentUpdate&&(o++,(t=console).log.apply(t,function(e){if(Array.isArray(e))return n(e)}(a=esbuildTool.consoleEx.pack(esbuildTool.consoleEx.getStyle("#eeeeee","#08d9d6"),r))||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(a)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var o=Object.prototype.toString.call(e).slice(8,-1);return"Object"===o&&e.constructor&&(o=e.constructor.name),"Map"===o||"Set"===o?Array.from(e):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(e,t):void 0}}(a)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),!i&&o>0&&(i=!0,s('\n                        <div class="title">È°πÁõÆÂÜÖÂÆπÊúâÊõ¥Êñ∞ üîî</div>\n                        <div class="content">ÁÇπÂáªÊ∂àÊÅØÊ°ÜÊàñÁÇπÂáªÁ°ÆËÆ§ÊåâÈíÆÊàñÊåâEnterÈîÆÂà∑Êñ∞È°µÈù¢ÔºåÁÇπÂáªËÉåÊôØÊàñÂèñÊ∂àÊåâÈíÆÂèñÊ∂à</div>\n                    ',(function(n){o=0,i=!1,n&&location.reload()}))))})),esbuildTool.config.ifUpdateNow&&(void 0!==document.hidden?(e="hidden",t="visibilitychange"):void 0!==document.msHidden?(e="msHidden",t="msvisibilitychange"):void 0!==document.webkitHidden&&(e="webkitHidden",t="webkitvisibilitychange"),void 0===document.addEventListener||void 0===document[e]?console.warn("ÂΩìÂâçÊµèËßàÂô®‰∏çËÉΩÂà§Êñ≠Á™óÂè£ÊòØÂê¶Ëé∑ÂèñÊàñÂ§±ÂéªÁÑ¶ÁÇπüò∞"):document.addEventListener(t,(function(){document[e]||o>0&&location.reload()}),!1))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly/impnvuI9sZWLinZUvLi9zcmMvYWxlcnRUb29sLmpzIl0sIm5hbWVzIjpbIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoaWRkZW4iLCJ2aXNpYmlsaXR5Q2hhbmdlIiwiX3VwZGF0ZU51bWJlciIsIl9pZkNvbmZpcm0iLCJjb25maXJtRXgiLCJfZGl2RG9tIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJfYmFja0YiLCJfY29uZmlybUV4RG9tIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsIl9iZ0RvbSIsIl9jb250ZW50RG9tIiwiX21lc0RvbSIsIl95ZXNCdXREb20iLCJfbm9CdXREb20iLCJfaWZTaG93IiwiZSIsInN0eWxlIiwidHJhbnNmb3JtIiwiaW5uZXJXaWR0aCIsImV2ZW50Iiwia2V5IiwiX2hpZGUiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJvbmNsaWNrIiwic3RvcFByb3BhZ2F0aW9uIiwibWVzIiwiX2YiLCJhZGQiLCJlc2J1aWxkVG9vbCIsIndlYlNvY2tldFQiLCJpbnN0YW5jZSIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJfbWVzIiwidHlwZSIsIm1lc1R5cGUiLCJjb250ZW50VXBkYXRlIiwiY29uc29sZSIsImxvZyIsImNvbnNvbGVFeCIsInBhY2siLCJnZXRTdHlsZSIsImZsYWciLCJsb2NhdGlvbiIsInJlbG9hZCIsImNvbmZpZyIsImlmVXBkYXRlTm93IiwibXNIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJ3YXJuIl0sIm1hcHBpbmdzIjoiZ0hBQ0FBLE9BQU9DLGlCQUFpQixRQUFRLFdBRTVCLElBeUlZQyxFQUFRQyxFQWhEWkMsRUFFQUMsRUEzRkZDLEVBQWEsV0FDZixJQWFJQyxFQUFVQyxTQUFTQyxjQUFjLE9BQ3JDRixFQUFRRyxVQWRHLHVXQWdCWEgsRUFBVUMsU0FBU0csS0FBS0MsWUFBWUwsRUFBUU0sbUJBRTVDLElBU0lDLEVBVEFDLEVBQWdCUCxTQUFTUSx1QkFBdUIsYUFBYSxHQUM3REMsRUFBU0YsRUFBY0MsdUJBQXVCLE1BQU0sR0FDcERFLEVBQWNILEVBQWNDLHVCQUF1QixXQUFXLEdBQzlERyxFQUFVSixFQUFjQyx1QkFBdUIsT0FBTyxHQUN0REksRUFBYUwsRUFBY0MsdUJBQXVCLE9BQU8sR0FDekRLLEVBQVlOLEVBQWNDLHVCQUF1QixNQUFNLEdBRXZETSxHQUFVLEVBSWR0QixPQUFPQyxpQkFBaUIsVUFBVSxTQUFDc0IsR0FDL0JMLEVBQVlNLE1BQU1DLFVBQWxCLGdCQUF1Q3pCLE9BQU8wQixXQUFhLElBQTNELFFBR0pSLEVBQVlNLE1BQU1DLFVBQWxCLGdCQUF1Q3pCLE9BQU8wQixXQUFhLElBQTNELEtBRUExQixPQUFPQyxpQkFBaUIsV0FBVyxTQUFDMEIsR0FDNUJMLEdBQXdCLFNBQWJLLEVBQU1DLE1BQ2pCZCxHQUFVQSxHQUFPLEdBQ2pCZSxLQUVBUCxHQUF3QixVQUFiSyxFQUFNQyxNQUNqQmQsR0FBVUEsR0FBTyxHQUNqQmUsUUFJUixJQVFJQSxFQUFRLFdBQ1JQLEdBQVUsRUFDVlAsRUFBY2UsVUFBVUMsT0FBTyxTQTBCbkMsT0F2QkFkLEVBQU9lLFFBQVUsV0FDYmxCLEdBQVVBLEdBQU8sR0FDakJlLEtBR0pYLEVBQVljLFFBQVUsU0FBQ1QsR0FDbkJULEdBQVVBLEdBQU8sR0FDakJlLElBQ0FOLEVBQUVVLG1CQUdOYixFQUFXWSxRQUFVLFNBQUNULEdBQ2xCVCxHQUFVQSxHQUFPLEdBQ2pCZSxJQUNBTixFQUFFVSxtQkFHTlosRUFBVVcsUUFBVSxTQUFDVCxHQUNqQlQsR0FBVUEsR0FBTyxHQUNqQmUsSUFDQU4sRUFBRVUsbUJBakNNLFNBQUNDLEVBQUtDLEdBQ2RiLEdBQVUsRUFDVlAsRUFBY2UsVUFBVU0sSUFBSSxRQUU1QnRCLEVBQVNxQixFQUNUaEIsRUFBUVQsVUFBWXdCLEdBcERULEdBeUZYOUIsRUFBZ0IsRUFFaEJDLEdBQWEsRUFHakJnQyxZQUFZQyxXQUFXQyxTQUFTdEMsaUJBQWlCLFdBQVcsU0FBVTBCLEdBQ2xFLElBSTJELEUsRUFKdkRhLEVBQU9DLEtBQUtDLE1BQU1mLEVBQU1hLE1BQ3hCRyxFQUFPSCxFQUFLTixJQUNKTSxFQUFLSSxNQUVKUCxZQUFZQyxXQUFXTyxRQUFRQyxnQkFDeEMxQyxLQUVBLEVBQUEyQyxTQUFRQyxJQUFSLFEsK0NBQ09YLFlBQVlZLFVBQVVDLEtBQ3JCYixZQUFZWSxVQUFVRSxTQUFTLFVBQVcsV0FDMUNSLEssa2tCQUlIdEMsR0FBY0QsRUFBZ0IsSUFDL0JDLEdBQWEsRUFFYkMsRUFBVSxnTEFLTixTQUFDOEMsR0FDR2hELEVBQWdCLEVBQ2hCQyxHQUFhLEVBRVQrQyxHQUVBQyxTQUFTQyxpQkFZN0JqQixZQUFZa0IsT0FBT0MsbUJBR1ksSUFBcEJoRCxTQUFTTixRQUNoQkEsRUFBUyxTQUNUQyxFQUFtQix5QkFDaUIsSUFBdEJLLFNBQVNpRCxVQUN2QnZELEVBQVMsV0FDVEMsRUFBbUIsMkJBQ3FCLElBQTFCSyxTQUFTa0QsZUFDdkJ4RCxFQUFTLGVBQ1RDLEVBQW1CLCtCQUlrQixJQUE5QkssU0FBU1AsdUJBQ1ksSUFBckJPLFNBQVNOLEdBRWhCNkMsUUFBUVksS0FBSywwQkFHYm5ELFNBQVNQLGlCQUNMRSxHQUNBLFdBQ1FLLFNBQVNOLElBSUxFLEVBQWdCLEdBRWhCaUQsU0FBU0MsWUFJckIsUSIsImZpbGUiOiJhbGVydFRvb2wuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvL+WKoOi9veWujOaIkOS6i+S7tlxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7XG4gICAgLyoqIOaPkOekuuahhuaJqeWxlSAqL1xuICAgIGNvbnN0IGNvbmZpcm1FeCA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBfZGl2ID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29uZmlybUV4XCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmdcIj48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb250ZW50XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lc1wiPua2iOaBrzwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidXRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInllc1wiPuehruiupOKclO+4jzwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwibm9cIj7lj5bmtojinYw8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICBgO1xuICAgICAgICAvL+a3u+WKoOWFg+e0oFxuICAgICAgICBsZXQgX2RpdkRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBfZGl2RG9tLmlubmVySFRNTCA9IF9kaXY7XG4gICAgICAgIC8vXG4gICAgICAgIF9kaXZEb20gPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKF9kaXZEb20uZmlyc3RFbGVtZW50Q2hpbGQpO1xuICAgICAgICAvL+iOt+WPluWQhOS4quWFg+e0oFxuICAgICAgICBsZXQgX2NvbmZpcm1FeERvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbmZpcm1FeCcpWzBdO1xuICAgICAgICBsZXQgX2JnRG9tID0gX2NvbmZpcm1FeERvbS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdiZycpWzBdO1xuICAgICAgICBsZXQgX2NvbnRlbnREb20gPSBfY29uZmlybUV4RG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2NvbnRlbnQnKVswXTtcbiAgICAgICAgbGV0IF9tZXNEb20gPSBfY29uZmlybUV4RG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ21lcycpWzBdO1xuICAgICAgICBsZXQgX3llc0J1dERvbSA9IF9jb25maXJtRXhEb20uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgneWVzJylbMF07XG4gICAgICAgIGxldCBfbm9CdXREb20gPSBfY29uZmlybUV4RG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ25vJylbMF07XG4gICAgICAgIC8v5piv5ZCm5pi+56S6XG4gICAgICAgIGxldCBfaWZTaG93ID0gZmFsc2U7XG4gICAgICAgIC8v5Zue6LCD5Ye95pWwXG4gICAgICAgIGxldCBfYmFja0Y7XG4gICAgICAgIC8v55uR5ZCs56qX5Y+j5aSn5bCP5pS55Y+YXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoZSkgPT4ge1xuICAgICAgICAgICAgX2NvbnRlbnREb20uc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlKCR7d2luZG93LmlubmVyV2lkdGggLyA1MDB9KWA7XG4gICAgICAgIH0pO1xuICAgICAgICAvL+S4u+WKqOinpuWPkeeql+WPo+Wkp+Wwj+aUueWPmOS6i+S7tlxuICAgICAgICBfY29udGVudERvbS5zdHlsZS50cmFuc2Zvcm0gPSBgc2NhbGUoJHt3aW5kb3cuaW5uZXJXaWR0aCAvIDUwMH0pYDtcbiAgICAgICAgLy/mt7vliqDplK7nm5jkuovku7ZcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChfaWZTaG93ICYmIGV2ZW50LmtleSA9PSAnRW50ZXInKSB7XG4gICAgICAgICAgICAgICAgX2JhY2tGICYmIF9iYWNrRih0cnVlKTtcbiAgICAgICAgICAgICAgICBfaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9pZlNob3cgJiYgZXZlbnQua2V5ID09ICdFc2NhcGUnKSB7XG4gICAgICAgICAgICAgICAgX2JhY2tGICYmIF9iYWNrRihmYWxzZSk7XG4gICAgICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8v5pi+56S655qE5pa55rOVXG4gICAgICAgIGxldCBfc2hvdyA9IChtZXMsIF9mKSA9PiB7XG4gICAgICAgICAgICBfaWZTaG93ID0gdHJ1ZTtcbiAgICAgICAgICAgIF9jb25maXJtRXhEb20uY2xhc3NMaXN0LmFkZCgnc2hvdycpO1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIF9iYWNrRiA9IF9mO1xuICAgICAgICAgICAgX21lc0RvbS5pbm5lckhUTUwgPSBtZXM7XG4gICAgICAgIH07XG4gICAgICAgIC8v6ZqQ6JeP55qE5pa55rOVXG4gICAgICAgIGxldCBfaGlkZSA9ICgpID0+IHtcbiAgICAgICAgICAgIF9pZlNob3cgPSBmYWxzZTtcbiAgICAgICAgICAgIF9jb25maXJtRXhEb20uY2xhc3NMaXN0LnJlbW92ZSgnc2hvdycpO1xuICAgICAgICB9O1xuICAgICAgICAvL+aVtOS4quWFg+e0oFxuICAgICAgICBfYmdEb20ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIF9iYWNrRiAmJiBfYmFja0YoZmFsc2UpO1xuICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLy/pmLvmraLog4zmma/mnb/nmoTngrnlh7vkuovku7blhpLms6FcbiAgICAgICAgX2NvbnRlbnREb20ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICBfYmFja0YgJiYgX2JhY2tGKHRydWUpO1xuICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8v56Gu6K6k5oyJ6ZKuXG4gICAgICAgIF95ZXNCdXREb20ub25jbGljayA9IChlKSA9PiB7XG4gICAgICAgICAgICBfYmFja0YgJiYgX2JhY2tGKHRydWUpO1xuICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8v5Y+W5raI5oyJ6ZKuXG4gICAgICAgIF9ub0J1dERvbS5vbmNsaWNrID0gKGUpID0+IHtcbiAgICAgICAgICAgIF9iYWNrRiAmJiBfYmFja0YoZmFsc2UpO1xuICAgICAgICAgICAgX2hpZGUoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8vXG4gICAgICAgIHJldHVybiBfc2hvdztcbiAgICB9KSgpO1xuXG4gICAgLy9cbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICAvKiog6aG555uu5pu05paw5qyh5pWwICovXG4gICAgICAgIGxldCBfdXBkYXRlTnVtYmVyID0gMDtcbiAgICAgICAgLy/mmK/lkKbmnInnoa7orqTmoYblnKjnrYnlvoVcbiAgICAgICAgbGV0IF9pZkNvbmZpcm0gPSBmYWxzZTtcblxuICAgICAgICAvL+ebkeWQrOa2iOaBr1xuICAgICAgICBlc2J1aWxkVG9vbC53ZWJTb2NrZXRULmluc3RhbmNlLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgICAgIGxldCBfbWVzID0gZGF0YS5tZXM7XG4gICAgICAgICAgICBsZXQgX3R5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgaWYgKF90eXBlID09IGVzYnVpbGRUb29sLndlYlNvY2tldFQubWVzVHlwZS5jb250ZW50VXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZU51bWJlcisrO1xuICAgICAgICAgICAgICAgIC8vIOWkhOeQhuaVsOaNrlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgICAgICAuLi5lc2J1aWxkVG9vbC5jb25zb2xlRXgucGFjayhcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzYnVpbGRUb29sLmNvbnNvbGVFeC5nZXRTdHlsZSgnI2VlZWVlZScsICcjMDhkOWQ2JyksXG4gICAgICAgICAgICAgICAgICAgICAgICBfbWVzLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgLy/lvLnlh7rmj5DnpLrmoYZcbiAgICAgICAgICAgICAgICBpZiAoIV9pZkNvbmZpcm0gJiYgX3VwZGF0ZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgX2lmQ29uZmlybSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpcm1FeChcbiAgICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0aXRsZVwiPumhueebruWGheWuueacieabtOaWsCDwn5SUPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29udGVudFwiPueCueWHu+a2iOaBr+ahhuaIlueCueWHu+ehruiupOaMiemSruaIluaMiUVudGVy6ZSu5Yi35paw6aG16Z2i77yM54K55Ye76IOM5pmv5oiW5Y+W5raI5oyJ6ZKu5Y+W5raIPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIGAsXG4gICAgICAgICAgICAgICAgICAgICAgICAoZmxhZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF91cGRhdGVOdW1iZXIgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9pZkNvbmZpcm0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIpOaWreeKtuaAgVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Yi35paw6aG16Z2iXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCflj5bmtognKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8g55uR5ZCs6aG16Z2i54Sm54K55LqL5Lu2XG4gICAgICAgIGlmIChlc2J1aWxkVG9vbC5jb25maWcuaWZVcGRhdGVOb3cpIHtcbiAgICAgICAgICAgIC8v5qC55o2u5LiN5ZCM5rWP6KeI5Zmo6I635Y+W5bGe5oCn5ZCN56ewXG4gICAgICAgICAgICBsZXQgaGlkZGVuLCB2aXNpYmlsaXR5Q2hhbmdlO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5oaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRvY3VtZW50Lm1zSGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICdtc0hpZGRlbic7XG4gICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSA9ICdtc3Zpc2liaWxpdHljaGFuZ2UnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQud2Via2l0SGlkZGVuICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGhpZGRlbiA9ICd3ZWJraXRIaWRkZW4nO1xuICAgICAgICAgICAgICAgIHZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyDliKTmlq3mtY/op4jlmajnmoTmlK/mjIHmg4XlhrVcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICAgICAgICAgICAgICB0eXBlb2YgZG9jdW1lbnRbaGlkZGVuXSA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybign5b2T5YmN5rWP6KeI5Zmo5LiN6IO95Yik5pat56qX5Y+j5piv5ZCm6I635Y+W5oiW5aSx5Y6754Sm54K58J+YsCcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyDnm5HlkKx2aXNpYmlsaXR5Q2hhbmdl5LqL5Lu2XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJpbGl0eUNoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50W2hpZGRlbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WkseWOu+eEpueCuVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDojrflj5bnhKbngrlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3VwZGF0ZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/liLfmlrDpobXpnaJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSkoKTtcbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==